// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adykaaa/k8s-netpol-ctrl/app (interfaces: ResourceWatcher)

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	informers "k8s.io/client-go/informers"
	cache "k8s.io/client-go/tools/cache"
)

// MockResourceWatcher is a mock of ResourceWatcher interface.
type MockResourceWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockResourceWatcherMockRecorder
}

// MockResourceWatcherMockRecorder is the mock recorder for MockResourceWatcher.
type MockResourceWatcherMockRecorder struct {
	mock *MockResourceWatcher
}

// NewMockResourceWatcher creates a new mock instance.
func NewMockResourceWatcher(ctrl *gomock.Controller) *MockResourceWatcher {
	mock := &MockResourceWatcher{ctrl: ctrl}
	mock.recorder = &MockResourceWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceWatcher) EXPECT() *MockResourceWatcherMockRecorder {
	return m.recorder
}

// NewEventHandlerFuncs mocks base method.
func (m *MockResourceWatcher) NewEventHandlerFuncs() *cache.ResourceEventHandlerFuncs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEventHandlerFuncs")
	ret0, _ := ret[0].(*cache.ResourceEventHandlerFuncs)
	return ret0
}

// NewEventHandlerFuncs indicates an expected call of NewEventHandlerFuncs.
func (mr *MockResourceWatcherMockRecorder) NewEventHandlerFuncs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEventHandlerFuncs", reflect.TypeOf((*MockResourceWatcher)(nil).NewEventHandlerFuncs))
}

// Watch mocks base method.
func (m *MockResourceWatcher) Watch(arg0 context.Context, arg1 informers.GenericInformer, arg2 cache.ResourceEventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockResourceWatcherMockRecorder) Watch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockResourceWatcher)(nil).Watch), arg0, arg1, arg2)
}
