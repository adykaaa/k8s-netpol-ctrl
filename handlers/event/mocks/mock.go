// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adykaaa/k8s-netpol-ctrl/handlers/event (interfaces: NetworkPolicyHandler,ObjectHandler,AttributeHandler)

// Package eventmock is a generated GoMock package.
package eventmock

import (
	reflect "reflect"

	object "github.com/adykaaa/k8s-netpol-ctrl/handlers/object"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/networking/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockNetworkPolicyHandler is a mock of NetworkPolicyHandler interface.
type MockNetworkPolicyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyHandlerMockRecorder
}

// MockNetworkPolicyHandlerMockRecorder is the mock recorder for MockNetworkPolicyHandler.
type MockNetworkPolicyHandlerMockRecorder struct {
	mock *MockNetworkPolicyHandler
}

// NewMockNetworkPolicyHandler creates a new mock instance.
func NewMockNetworkPolicyHandler(ctrl *gomock.Controller) *MockNetworkPolicyHandler {
	mock := &MockNetworkPolicyHandler{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkPolicyHandler) EXPECT() *MockNetworkPolicyHandlerMockRecorder {
	return m.recorder
}

// AppendLabelsToPeers mocks base method.
func (m *MockNetworkPolicyHandler) AppendLabelsToPeers(arg0 map[string][]string) ([]v1.NetworkPolicyPeer, []v1.NetworkPolicyPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendLabelsToPeers", arg0)
	ret0, _ := ret[0].([]v1.NetworkPolicyPeer)
	ret1, _ := ret[1].([]v1.NetworkPolicyPeer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AppendLabelsToPeers indicates an expected call of AppendLabelsToPeers.
func (mr *MockNetworkPolicyHandlerMockRecorder) AppendLabelsToPeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendLabelsToPeers", reflect.TypeOf((*MockNetworkPolicyHandler)(nil).AppendLabelsToPeers), arg0)
}

// GetPolicyByPodLabels mocks base method.
func (m *MockNetworkPolicyHandler) GetPolicyByPodLabels(arg0 string, arg1 map[string]string) (*v1.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyByPodLabels", arg0, arg1)
	ret0, _ := ret[0].(*v1.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyByPodLabels indicates an expected call of GetPolicyByPodLabels.
func (mr *MockNetworkPolicyHandlerMockRecorder) GetPolicyByPodLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyByPodLabels", reflect.TypeOf((*MockNetworkPolicyHandler)(nil).GetPolicyByPodLabels), arg0, arg1)
}

// NewPolicy mocks base method.
func (m *MockNetworkPolicyHandler) NewPolicy(arg0, arg1 string, arg2 map[string]string, arg3 map[string][]string) (*v1.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPolicy indicates an expected call of NewPolicy.
func (mr *MockNetworkPolicyHandlerMockRecorder) NewPolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPolicy", reflect.TypeOf((*MockNetworkPolicyHandler)(nil).NewPolicy), arg0, arg1, arg2, arg3)
}

// MockObjectHandler is a mock of ObjectHandler interface.
type MockObjectHandler struct {
	ctrl     *gomock.Controller
	recorder *MockObjectHandlerMockRecorder
}

// MockObjectHandlerMockRecorder is the mock recorder for MockObjectHandler.
type MockObjectHandlerMockRecorder struct {
	mock *MockObjectHandler
}

// NewMockObjectHandler creates a new mock instance.
func NewMockObjectHandler(ctrl *gomock.Controller) *MockObjectHandler {
	mock := &MockObjectHandler{ctrl: ctrl}
	mock.recorder = &MockObjectHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectHandler) EXPECT() *MockObjectHandlerMockRecorder {
	return m.recorder
}

// AddLabel mocks base method.
func (m *MockObjectHandler) AddLabel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockObjectHandlerMockRecorder) AddLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockObjectHandler)(nil).AddLabel))
}

// Mutate mocks base method.
func (m *MockObjectHandler) Mutate(arg0 object.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mutate indicates an expected call of Mutate.
func (mr *MockObjectHandlerMockRecorder) Mutate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockObjectHandler)(nil).Mutate), arg0)
}

// MockAttributeHandler is a mock of AttributeHandler interface.
type MockAttributeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAttributeHandlerMockRecorder
}

// MockAttributeHandlerMockRecorder is the mock recorder for MockAttributeHandler.
type MockAttributeHandlerMockRecorder struct {
	mock *MockAttributeHandler
}

// NewMockAttributeHandler creates a new mock instance.
func NewMockAttributeHandler(ctrl *gomock.Controller) *MockAttributeHandler {
	mock := &MockAttributeHandler{ctrl: ctrl}
	mock.recorder = &MockAttributeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttributeHandler) EXPECT() *MockAttributeHandlerMockRecorder {
	return m.recorder
}

// ConvertLabels mocks base method.
func (m *MockAttributeHandler) ConvertLabels(arg0 map[string]string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertLabels", arg0)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// ConvertLabels indicates an expected call of ConvertLabels.
func (mr *MockAttributeHandlerMockRecorder) ConvertLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertLabels", reflect.TypeOf((*MockAttributeHandler)(nil).ConvertLabels), arg0)
}

// GetLabelsFromEnvVars mocks base method.
func (m *MockAttributeHandler) GetLabelsFromEnvVars(arg0 map[string]string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsFromEnvVars", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsFromEnvVars indicates an expected call of GetLabelsFromEnvVars.
func (mr *MockAttributeHandlerMockRecorder) GetLabelsFromEnvVars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsFromEnvVars", reflect.TypeOf((*MockAttributeHandler)(nil).GetLabelsFromEnvVars), arg0)
}

// GetLocalEnvVars mocks base method.
func (m *MockAttributeHandler) GetLocalEnvVars(arg0 v10.Object) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalEnvVars", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalEnvVars indicates an expected call of GetLocalEnvVars.
func (mr *MockAttributeHandlerMockRecorder) GetLocalEnvVars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalEnvVars", reflect.TypeOf((*MockAttributeHandler)(nil).GetLocalEnvVars), arg0)
}

// MergeLabels mocks base method.
func (m *MockAttributeHandler) MergeLabels(arg0 ...map[string][]string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeLabels", varargs...)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeLabels indicates an expected call of MergeLabels.
func (mr *MockAttributeHandlerMockRecorder) MergeLabels(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeLabels", reflect.TypeOf((*MockAttributeHandler)(nil).MergeLabels), arg0...)
}
